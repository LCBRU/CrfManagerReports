<?xml version="1.0" encoding="utf-8"?>
<crf:areaConfiguration xmlns:crf="http://www.crfmanager.com/system/xml">
  <crf:comment>
    <crf:version>S00011V01</crf:version>
    <crf:analysis>Site Metrics</crf:analysis>
    <crf:analysis>Occupancy</crf:analysis>
    <crf:analysis></crf:analysis>
    <crf:summary>Provides total number of hours occupancy within and outwith core hours for each room that has been used</crf:summary>
    <crf:notes>
      This report considers Occupancy as clinical accommodation used for patient study visits (patient use).
      Occupancy definition in this report = non overlapping patient use/room availability during core hours.
      
      Users are able to specify what status of patient bookings they wish to include.
      Any overlapping visits in the same room are merged into a single time period.
      For example two single hour bookings 9.00 am to 10 am and 9.30 am  to 10.30 am would be merged into a single 1.5 hour time period 9am-10.30am.
      Patient use is then split into core hour use and non-core hour use and summed for each month period.
      For the room availability:
      Any other use of the accommodation that is not for patient use is removed from the core hours availability.
      Users can specify what status of booking is valid ‘non patient use’
      For example if a room is closed for maintenance, or used for a study monitor or for any other purpose this time is removed from the room availability.
      Site closures are converted into room closures and removed from monthly availability.
      The occupancy is then a simple monthly calculation  = non overlapping patient use/room availability during core hours
      No percentage calculation is made on out of core hours we simply provide the hours durations (overlapping times removed)
    </crf:notes>

    <crf:InternalNotes>
    
    </crf:InternalNotes>
  </crf:comment>
  <crf:queryBatch>
    <crf:query name="Occupancy">
      <crf:searchOptions>
        <crf:parameter name="StartMonth" type="int" displayName="Starting on the 1&lt;sup&gt;st&lt;/sup&gt; of">
          <crf:query>
            SET NOCOUNT ON;
            DECLARE @Months TABLE
            (
            TextField NVARCHAR(10),
            ValueField INT
            )

            INSERT INTO @Months (TextField,ValueField) VALUES ('January',1);
            INSERT INTO @Months (TextField,ValueField) VALUES ('February',2);
            INSERT INTO @Months (TextField,ValueField) VALUES ('March',3);
            INSERT INTO @Months (TextField,ValueField) VALUES ('April',4);
            INSERT INTO @Months (TextField,ValueField) VALUES ('May',5);
            INSERT INTO @Months (TextField,ValueField) VALUES ('June',6);
            INSERT INTO @Months (TextField,ValueField) VALUES ('July',7);
            INSERT INTO @Months (TextField,ValueField) VALUES ('August',8);
            INSERT INTO @Months (TextField,ValueField) VALUES ('September',9);
            INSERT INTO @Months (TextField,ValueField) VALUES ('October',10);
            INSERT INTO @Months (TextField,ValueField) VALUES ('November',11);
            INSERT INTO @Months (TextField,ValueField) VALUES ('December',12);

            SELECT TextField,ValueField FROM @Months;
          </crf:query>
          <crf:parameter name="StartYear" type="int" displayName=" " maxLength="4" />
        </crf:parameter>
        <crf:parameter name="EndMonth" type="int" displayName="and ending before 1&lt;sup&gt;st&lt;/sup&gt; of">
          <crf:query>
            DECLARE @Months TABLE
            (
            TextField NVARCHAR(10),
            ValueField INT
            )

            INSERT INTO @Months (TextField,ValueField) VALUES ('January',1);
            INSERT INTO @Months (TextField,ValueField) VALUES ('February',2);
            INSERT INTO @Months (TextField,ValueField) VALUES ('March',3);
            INSERT INTO @Months (TextField,ValueField) VALUES ('April',4);
            INSERT INTO @Months (TextField,ValueField) VALUES ('May',5);
            INSERT INTO @Months (TextField,ValueField) VALUES ('June',6);
            INSERT INTO @Months (TextField,ValueField) VALUES ('July',7);
            INSERT INTO @Months (TextField,ValueField) VALUES ('August',8);
            INSERT INTO @Months (TextField,ValueField) VALUES ('September',9);
            INSERT INTO @Months (TextField,ValueField) VALUES ('October',10);
            INSERT INTO @Months (TextField,ValueField) VALUES ('November',11);
            INSERT INTO @Months (TextField,ValueField) VALUES ('December',12);

            SELECT TextField,ValueField FROM @Months;
          </crf:query>
          <crf:parameter name="EndYear" type="int" displayName=" " maxLength="4" />
        </crf:parameter>
        <crf:parameter name="StartHour" type="int" displayName="and the core hours are from" maxLength="2" defaultText="08">
          <crf:parameter name="StartMinutes" type="int" displayName=":" maxLength="2" defaultText="30" />
          <crf:parameter name="EndHour" type="int" displayName=" to" maxLength="2" defaultText="16">
            <crf:parameter name="EndMinutes" type="int" displayName=":" maxLength="2" defaultText="30" />
          </crf:parameter>
        </crf:parameter>
        <crf:parameter name="StatusList" type="int" displayName="patient appointments with the following status options will be included in occupancy" multiSelect="true" columns="2">
          <crf:query>
            SELECT
            REStatusTypeID AS ValueField,
            RESTName AS TextField
            FROM
            view_ResourceEventStatusTypes VREST INNER JOIN
            (SELECT DISTINCT REStatusID FROM view_ResourceEvents WHERE (ResourceTypeID IN (1010,1018)) AND (REAreaID=301)) VRE ON VREST.REStatusTypeID=VRE.REStatusID
            WHERE
            (RESTSubTypeID NOT IN (0,9,10))
            ORDER BY
            RESTName;
          </crf:query>
        </crf:parameter>
        <crf:parameter name="OtherEventStatusList" type="int" displayName="non-patient appointments with the following status will be removed from the total time available" multiSelect="true" columns="2">
          <crf:query>
            SELECT
            REStatusTypeID AS ValueField,
            RESTName AS TextField
            FROM
            view_ResourceEventStatusTypes VREST INNER JOIN
            (SELECT DISTINCT REStatusID FROM view_ResourceEvents WHERE (ResourceTypeID IN (1010,1018))) VRE ON VREST.REStatusTypeID=VRE.REStatusID
            WHERE
            (RESTSubTypeID&lt;&gt;0)
            ORDER BY
            RESTName;
          </crf:query>
        </crf:parameter>
        <crf:parameter name="ResourceList" type="nvarchar" displayName="include the following rooms" multiSelect="true" columns="3" initialSelection="All">
          <crf:query>
            SELECT
            VR.ResourceID AS ValueField,
            VRO.ResourceName + ': ' + VR.ResourceName AS TextField
            FROM
            view_Resources VR INNER JOIN view_Resources VRO ON VR.ROwnerID=VRO.ResourceID
            WHERE
            (VR.ResourceTypeID IN (1010,1018))
            AND (VR.ResourceName NOT LIKE '%outreach%')
            AND (VR.ResourceName NOT LIKE '%sample%')
            ORDER BY
            VRO.ResourceName,
            VR.ResourceName;
          </crf:query>
        </crf:parameter>
        <crf:parameter name="SpecialisedOnly" type="bit" displayName="only report for specialised usage" />
        <crf:parameter name="OtherMinutes" type="int" displayName="remove this number of minutes for lunch etc." maxLength="2" defaultText="30" />
        <crf:parameter name="Percentage" type="int" displayName="use this percentage correction factor" maxLength="2" defaultText="10" />
      </crf:searchOptions>

      <crf:statement>
        SET NOCOUNT ON;

        DECLARE @StatusList NVARCHAR(2000);
        DECLARE @OtherEventStatusList NVARCHAR(2000);
        DECLARE @StartHour INT;
        DECLARE @StartMinutes INT;
        DECLARE @EndHour INT;
        DECLARE @EndMinutes INT;
        DECLARE @StartDate DATETIME;
        DECLARE @EndDate DATETIME;
        DECLARE @ResourceList NVARCHAR(MAX);
        DECLARE @ClosedStatusID INT;
        DECLARE @OtherMinutes INT;
        DECLARE @Percentage INT;
        DECLARE @SpecialisedStatusID INT;
        DECLARE @SpecialisedOnly BIT;


        /** Get the ID of the closed status option */
        SELECT @ClosedStatusID=REStatusTypeID
        FROM view_ResourceEventStatusTypes
        WHERE (RESTSubTypeID=2)
          AND (RESTName='Closed');

        /** Get the ID of the specialised usage status option */
        SELECT
          @SpecialisedOnly=0,
          @SpecialisedStatusID=REStatusTypeID
        FROM view_ResourceEventStatusTypes
        WHERE (RESTSubTypeID=10)
          AND (RESTInternalName='SPECIALISED');


        /*********** Load the report settings **************/
        IF (@ItemID IS NOT NULL)
        BEGIN
          IF EXISTS( SELECT * FROM WTCRFStateFields WHERE WSFStateID=@ItemID )
          BEGIN
            DECLARE @ViewParams TABLE (
              FieldName VARCHAR(40),
              FieldValue VARCHAR(MAX)
            )

            INSERT INTO @ViewParams
            SELECT
              WSFName,
              WSFValue
            FROM WTCRFStateFields
            WHERE WSFStateID=@ItemID;

            SELECT @ResourceList=FieldValue FROM @ViewParams WHERE FieldName='ResourceList';
            SELECT @StartHour=CONVERT( INT,FieldValue ) FROM @ViewParams WHERE FieldName='StartHour';
            SELECT @StartMinutes=CONVERT( INT,FieldValue ) FROM @ViewParams WHERE FieldName='StartMinutes';
            SELECT @EndHour=CONVERT( INT,FieldValue ) FROM @ViewParams WHERE FieldName='EndHour';
            SELECT @EndMinutes=CONVERT( INT,FieldValue ) FROM @ViewParams WHERE FieldName='EndMinutes';
            SELECT @StatusList=FieldValue FROM @ViewParams WHERE FieldName='StatusList';
            SELECT @OtherEventStatusList=FieldValue FROM @ViewParams WHERE FieldName='OtherEventStatusList';
            SELECT @OtherMinutes=CONVERT( INT,FieldValue ) FROM @ViewParams WHERE FieldName='OtherMinutes';
            SELECT @Percentage=CONVERT( INT,FieldValue ) FROM @ViewParams WHERE FieldName='Percentage';
            SELECT @SpecialisedOnly=CONVERT( BIT,FieldValue ) FROM @ViewParams WHERE FieldName='SpecialisedOnly';

            SELECT @StartDate=CONVERT(DATETIME,'1/' + (
              SELECT CONVERT(VARCHAR(2),M.FieldValue)
              FROM @ViewParams M
              WHERE M.FieldName='StartMonth') + '/' + CONVERT(VARCHAR(4),Y.FieldValue),103 )
            FROM @ViewParams Y
            WHERE FieldName='StartYear';

            SELECT @EndDate=CONVERT(DATETIME,'1/' + (
              SELECT CONVERT(VARCHAR(2),M.FieldValue)
              FROM @ViewParams M
              WHERE M.FieldName='EndMonth'
              ) + '/' + CONVERT(VARCHAR(4),Y.FieldValue),103 )
            FROM @ViewParams Y WHERE FieldName='EndYear';

          END;
        END;

        IF (@EndDate&lt;@StartDate)
        BEGIN
          RETURN;
        END;

        /*******************************************/

        /** Get a subset of status options to report occupancy for */
        DECLARE @OccupancyStatus TABLE (
          StatusID INT PRIMARY KEY
        )

        INSERT INTO @OccupancyStatus(StatusID)
        SELECT ItemID
        FROM dbo.get_IntegerTable(@StatusList);


        /** Get a subset of status options to determine available hours with */
        DECLARE @OtherEventStatus TABLE (
          StatusID INT PRIMARY KEY
        )

        INSERT INTO @OtherEventStatus(StatusID)
        SELECT ItemID
        FROM dbo.get_IntegerTable(@OtherEventStatusList);


        /** Get a subset of resources to report occupancy for */
        DECLARE @Resources TABLE (
          ResourceID UNIQUEIDENTIFIER PRIMARY KEY,
          ROwnerID UNIQUEIDENTIFIER
        )


        INSERT INTO @Resources(ResourceID,ROwnerID)
        SELECT R.ItemID,
          WR.ROwnerID
        FROM dbo.get_UniqueIdentifierTable(@ResourceList) R
        INNER JOIN WTCRFResources WR ON R.ItemID=WR.ResourceID;


        DECLARE @TotalSections INT;
        DECLARE @SectionIdx INT;
        DECLARE @SectionStartDate DATETIME;
        DECLARE @SectionEndDate DATETIME;

        SELECT
          @SectionIdx=1,
          @SectionStartDate=@StartDate,
          @SectionEndDate=DATEADD(month,1,@StartDate),
          @TotalSections=DATEDIFF(month,@StartDate,@EndDate);

        DECLARE @MinutesInDay INT;
        DECLARE @DayStartMinutes INT;
        DECLARE @DayEndMinutes INT;

        SET @MinutesInDay = 24*60;
        SET @DayStartMinutes = 60*@StartHour+@StartMinutes;
        SET @DayEndMinutes = 60*@EndHour+@EndMinutes;


        DECLARE @SpecialisedEvents TABLE (
          SpecResourceID UNIQUEIDENTIFIER,
          SpecStartDate DATETIME,
          SpecEndDate DATETIME
        )


        /** Get all specialist usage for all relevant resources in the time frame. */
        INSERT INTO @SpecialisedEvents (SpecResourceID,SpecStartDate,SpecEndDate)
        SELECT
          VRE.ResourceID,
          TStartDate,
          TEndDate
        FROM @Resources R
        LEFT OUTER JOIN view_ResourceEvents VRE ON VRE.ResourceID=R.ResourceID
        WHERE (REStatusID=@SpecialisedStatusID)
          AND (TEndDate&gt;=@StartDate)
          AND (TStartDate&lt;@EndDate);


        /** For specialist report, remove all resources that do not fall into this category */
        IF (@SpecialisedOnly=1)
        BEGIN
          DELETE FROM @Resources WHERE ResourceID NOT IN (SELECT SpecResourceID FROM @SpecialisedEvents);
        END;


        /** Get a subset of resource owners */
        DECLARE @ResourceOwners TABLE (
          OwnerID UNIQUEIDENTIFIER UNIQUE
        )

        INSERT INTO @ResourceOwners(OwnerID)
        SELECT DISTINCT ROwnerID
        FROM @Resources;

        SELECT NULL

      </crf:statement>
    </crf:query>

    <crf:query name="MinutesAvailablePerSection">
      <crf:statement>
        DECLARE @SectionMinutes TABLE
        (
        SectionIdx INT PRIMARY KEY,
        TotalMinutes INT NOT NULL,
        STMStartDate DATETIME,
        STMEndDate DATETIME
        )

        WHILE (@SectionIdx&lt;=@TotalSections)
        BEGIN

        /** Get the default total number of minutes in core hours available in this time-period */
        INSERT INTO @SectionMinutes(SectionIdx,TotalMinutes,STMStartDate,STMEndDate)
        SELECT
        @SectionIdx,
        dbo.get_MonthTotalAvailableMinutes(@SectionStartDate,@StartHour,@StartMinutes,@EndHour,@EndMinutes,COALESCE(@OtherMinutes,0),NULL,NULL,'WeekdaysOnly'),
        @SectionStartDate,
        @SectionEndDate;

        SET @SectionIdx=@SectionIdx+1;
        SELECT
        @SectionStartDate=DATEADD(month,1,@SectionStartDate),
        @SectionEndDate=DATEADD(month,1,@SectionEndDate);
        END;

        SELECT NULL;
      </crf:statement>
    </crf:query>

    <crf:query name="OtherEvents">
      <crf:statement>
        SELECT
        @SectionIdx=1,
        @SectionStartDate=@StartDate,
        @SectionEndDate=DATEADD(month,1,@StartDate),
        @TotalSections=DATEDIFF(month,@StartDate,@EndDate);

        DECLARE @Idx INT;
        DECLARE @Count INT;

        DECLARE @ResourceID UNIQUEIDENTIFIER;
        DECLARE @EventStartDate DATETIME;
        DECLARE @EventEndDate DATETIME;


        CREATE TABLE #OtherEvents
        (
        Idx INT IDENTITY(1,1),
        SectionIndex INT,
        SectionStartDate DATETIME,
        SectionEndDate DATETIME,
        ResourceID UNIQUEIDENTIFIER,
        OwnerID UNIQUEIDENTIFIER,
        ResourceName NVARCHAR(100),
        StartDate DATETIME,
        EndDate DATETIME,
        Days INT,
        DayStartMinutes INT,
        DayEndMinutes INT,
        MinutesInCoreHours INT DEFAULT 0,
        MinutesOutCoreHours INT DEFAULT 0,
        CorrectedMinutesInCoreHours INT DEFAULT 0,
        DateLabel VARCHAR(10),
        ReportStatus BIT DEFAULT 1
        )

        WHILE (@SectionIdx&lt;=@TotalSections)
        BEGIN

        /** Get all bookings overlapping or within the range */
        INSERT INTO #OtherEvents (SectionIndex,SectionStartDate,SectionEndDate,ResourceID,OwnerID,ResourceName,StartDate,EndDate)
        SELECT
        @SectionIdx,
        @SectionStartDate,
        @SectionEndDate,
        VRE.ResourceID,
        VRE.ROwnerID,
        ResourceName,
        TStartDate,
        TEndDate
        FROM
        view_ResourceEvents VRE INNER JOIN @Resources R ON VRE.ResourceID=R.ResourceID
        INNER JOIN @OtherEventStatus OS ON VRE.REStatusID=OS.StatusID
        WHERE
        (VRE.REAreaID&lt;&gt;301)
        AND (TEndDate>=@SectionStartDate) AND (TStartDate&lt;@SectionEndDate)
        ORDER BY
        TStartDate;

        /** Get all owner closures - this allows these to be processed with all other non-patient events */
        INSERT INTO #OtherEvents (SectionIndex,SectionStartDate,SectionEndDate,ResourceID,OwnerID,ResourceName,StartDate,EndDate)
        SELECT
        @SectionIdx,
        @SectionStartDate,
        @SectionEndDate,
        VR.ResourceID,
        VRE.ROwnerID,
        VR.ResourceName,
        TStartDate,
        TEndDate
        FROM
        view_ResourceEvents VRE INNER JOIN @Resources R ON VRE.ResourceID=R.ROwnerID
        INNER JOIN view_Resources VR ON VR.ResourceID=R.ResourceID
        WHERE
        (VRE.REAreaID&lt;&gt;301)
        AND (VRE.REStatusID=@ClosedStatusID)
        AND (TEndDate>=@SectionStartDate) AND (TStartDate&lt;@SectionEndDate)
        ORDER BY
        TStartDate;


        /** Truncate events overlapping the range to be within the range. Events crossing more than one range will
        be sub-divided accordingly */
        UPDATE
        #OtherEvents
        SET
        StartDate=
        CASE WHEN StartDate&lt;@SectionStartDate THEN
        @SectionStartDate
        ELSE
        StartDate
        END,
        EndDate=
        CASE WHEN EndDate&gt;@SectionEndDate THEN
        @SectionEndDate
        ELSE
        EndDate
        END
        WHERE
        (SectionIndex=@SectionIdx);


        SET @SectionIdx=@SectionIdx+1;
        SELECT
        @SectionStartDate=DATEADD(month,1,@SectionStartDate),
        @SectionEndDate=DATEADD(month,1,@SectionEndDate);
        END;


        /** Set the general details for each event. */
        UPDATE
        #OtherEvents
        SET
        DateLabel=CONVERT(VARCHAR(10),StartDate,103)


        /** Calculate core hours */
        /** Combine overlapping events into single event.*/
        DECLARE @OtherOverlaps TABLE
        (
        Idx INT NOT NULL UNIQUE,
        ResourceID UNIQUEIDENTIFIER NOT NULL,
        StartDate DATETIME NOT NULL,
        EndDate DATETIME NOT NULL
        )

        SELECT @Idx=1,@Count=COUNT(1) FROM #OtherEvents;

        WHILE (@Idx&lt;=@Count)
        BEGIN
        SET @ResourceID=NULL;

        SELECT
        @ResourceID=ResourceID,
        @EventStartDate=StartDate,
        @EventEndDate=EndDate
        FROM
        #OtherEvents
        WHERE
        (Idx=@Idx)
        AND (ReportStatus=1);

        IF (@ResourceID IS NOT NULL)
        BEGIN
        INSERT INTO @OtherOverlaps(Idx,ResourceID,StartDate,EndDate)
        SELECT
        Idx,
        ResourceID,
        StartDate,
        EndDate
        FROM
        #OtherEvents
        WHERE
        (ReportStatus=1)
        AND (ResourceID=@ResourceID)
        AND (EndDate&gt;@EventStartDate)
        AND (StartDate&lt;@EventEndDate);

        IF EXISTS(SELECT * FROM @OtherOverlaps HAVING COUNT(*)&gt;0)
        BEGIN
        UPDATE
        #OtherEvents
        SET
        ReportStatus=0
        WHERE
        Idx IN (SELECT Idx FROM @OtherOverlaps);

        INSERT INTO #OtherEvents (SectionIndex,SectionStartDate,SectionEndDate,ResourceID,OwnerID,ResourceName,StartDate,EndDate)
        SELECT
        SectionIndex,
        SectionStartDate,
        SectionEndDate,
        ResourceID,
        OwnerID,
        ResourceName,
        (SELECT MIN(StartDate) FROM @OtherOverlaps),
        (SELECT MAX(EndDate) FROM @OtherOverlaps)
        FROM
        #OtherEvents
        WHERE
        (Idx=@Idx);

        END;

        DELETE FROM @OtherOverlaps;
        END

        SET @Idx=@Idx+1;
        END;

        /** Remove irrelevant records.*/
        DELETE FROM #OtherEvents WHERE ReportStatus=0;

        SELECT NULL;

      </crf:statement>
    </crf:query>

    <crf:query name="ProcessOtherEvents">
      <crf:statement>
        UPDATE #OtherEvents
        SET
          Days=DATEDIFF(day,StartDate,EndDate),
          DayStartMinutes=DATEPART(hour,StartDate)*60 + DATEPART(minute,StartDate),
          DayEndMinutes=DATEPART(hour,EndDate)*60 + DATEPART(minute,EndDate);


        /** Calculate the number of minutes in and out of core hours for single day events.*/
        UPDATE #OtherEvents
        SET
          MinutesInCoreHours = CASE
            WHEN (DATEPART(weekday,StartDate) IN (1,7)) OR (DayEndMinutes&lt;@DayStartMinutes) OR (DayStartMinutes&gt;@DayEndMinutes) THEN
              0
            ELSE
              DATEDIFF(
                minute,
                CASE
                  WHEN @DayStartMinutes&gt;DayStartMinutes THEN
                    DATEADD(minute,@DayStartMinutes-DayStartMinutes,StartDate)
                  ELSE
                    StartDate
                  END,
                CASE
                  WHEN @DayEndMinutes&lt;DayEndMinutes THEN
                    DATEADD(minute,@DayEndMinutes-DayEndMinutes,EndDate)
                  ELSE
                    EndDate
                  END
              )
            END,
            MinutesOutCoreHours = CASE
              WHEN DATEPART(weekday,StartDate) IN (1,7) THEN
                DayEndMinutes-DayStartMinutes
              WHEN @DayStartMinutes&gt;DayStartMinutes THEN
                CASE
                WHEN DayEndMinutes&lt;@DayStartMinutes THEN
                  DayEndMinutes-DayStartMinutes
                ELSE
                  @DayStartMinutes-DayStartMinutes
                END
              ELSE
                0
              END
              +
              CASE
              WHEN DATEPART(weekday,StartDate) IN (1,7) THEN
                0
              WHEN @DayEndMinutes&lt;DayEndMinutes THEN
                CASE
                  WHEN DayStartMinutes&gt;@DayEndMinutes THEN
                    DayEndMinutes-DayStartMinutes
                  ELSE
                    DayEndMinutes-@DayEndMinutes
                  END
              ELSE
                0
              END
          WHERE (Days=0)

        /** Calculate the number of whole days in and out of core hours for multi-day events.*/
        UPDATE #OtherEvents
        SET
          MinutesInCoreHours=(@DayEndMinutes-@DayStartMinutes)*CASE WHEN (DATEPART(weekday,StartDate)=7) AND Days>7 THEN (Days) ELSE Days-1 END,
          MinutesOutCoreHours=(@MinutesInDay-@DayEndMinutes+@DayStartMinutes)*CASE WHEN (DATEPART(weekday,StartDate)=7) AND Days>7 THEN Days ELSE Days-1 END
        WHERE (Days&gt;1)


        /** Calculate the start and end of multi day events including weekends */
        UPDATE #OtherEvents
        SET
          MinutesInCoreHours = MinutesInCoreHours + CASE
            WHEN (DATEPART(weekday,StartDate) IN (1,7)) THEN
              0
            WHEN @DayStartMinutes&gt;DayStartMinutes THEN
              @DayEndMinutes-@DayStartMinutes
            WHEN @DayEndMinutes&gt;=DayStartMinutes THEN
              @DayEndMinutes-DayStartMinutes
            ELSE
              0
            END
            +
            CASE
            WHEN (DATEPART(weekday,EndDate) IN (1,7)) THEN
              0
            WHEN @DayEndMinutes&lt;DayEndMinutes THEN
              @DayEndMinutes-@DayStartMinutes
            WHEN @DayStartMinutes&lt;DayEndMinutes THEN
              DayEndMinutes-@DayStartMinutes
            ELSE
              0
            END,
        MinutesOutCoreHours = MinutesOutCoreHours + CASE
          WHEN (DATEPART(weekday,StartDate) IN (1,7)) THEN
            @MinutesInDay-DayStartMinutes
          WHEN @DayStartMinutes&gt;DayStartMinutes THEN
            @DayStartMinutes-DayStartMinutes+@MinutesInDay-@DayEndMinutes
          WHEN @DayEndMinutes&lt;=DayStartMinutes THEN
            @MinutesInDay-DayStartMinutes
          WHEN @DayEndMinutes&gt;DayStartMinutes THEN
            @MinutesInDay-@DayEndMinutes
          END +
          CASE
          WHEN (DATEPART(weekday,EndDate) IN (1,7)) THEN
            DayEndMinutes
          WHEN @DayEndMinutes&lt;DayEndMinutes THEN
            @DayStartMinutes+DayEndMinutes-@DayEndMinutes
          WHEN @DayStartMinutes&lt;DayEndMinutes THEN
            @DayStartMinutes
          ELSE
            DayEndMinutes
          END
        WHERE (Days&gt;0);


        /** Start Saturday or end Sunday - add day out core hours and remove day in-core hours*/
        UPDATE #OtherEvents
        SET
          MinutesOutCoreHours=MinutesOutCoreHours + (@DayEndMinutes-@DayStartMinutes),
          MinutesInCoreHours=MinutesInCoreHours - (@DayEndMinutes-@DayStartMinutes)
        WHERE (Days&gt;1)
          AND (Days&lt;3)
          AND (DATEPART(weekday,StartDate)=7 OR DATEPART(weekday,EndDate)=1);


        /** Add 2 days in-core hours to out-core hours for every weekend covered by the event */
        UPDATE #OtherEvents
        SET
          MinutesInCoreHours = MinutesInCoreHours-(
            (@DayEndMinutes-@DayStartMinutes) * (2) * (
              CASE WHEN DATEPART(year,EndDate)&lt;&gt;DATEPART(year,StartDate) THEN
                53
              ELSE DATEPART(week,EndDate) END
              -DATEPART(week,StartDate))
          ),
          MinutesOutCoreHours=MinutesOutCoreHours + (
            (@DayEndMinutes-@DayStartMinutes)*(2)*(
              CASE WHEN DATEPART(year,EndDate)&lt;&gt;DATEPART(year,StartDate) THEN
                53
              ELSE
                DATEPART(week,EndDate) END -DATEPART(week,StartDate)))
              WHERE (Days&gt;2)
                AND (DATEPART(week,StartDate)&lt;&gt;DATEPART(week,EndDate));

        SELECT NULL;
      </crf:statement>
    </crf:query>

    <crf:query name="SectionOccupancyEvents">
      <crf:statement>
        SELECT
          @SectionIdx=1,
          @SectionStartDate=@StartDate,
          @SectionEndDate=DATEADD(month,1,@StartDate),
          @TotalSections=DATEDIFF(month,@StartDate,@EndDate);

        CREATE TABLE #OccupancyEvents (
          Idx INT IDENTITY(1,1),
          SectionIndex INT,
          SectionStartDate DATETIME,
          SectionEndDate DATETIME,
          ResourceID UNIQUEIDENTIFIER,
          OwnerID UNIQUEIDENTIFIER,
          ResourceName NVARCHAR(100),
          StartDate DATETIME,
          EndDate DATETIME,
          Days INT,
          DayStartMinutes INT,
          DayEndMinutes INT,
          MinutesInCoreHours INT DEFAULT 0,
          MinutesOutCoreHours INT DEFAULT 0,
          CorrectedMinutesInCoreHours INT DEFAULT 0,
          DateLabel VARCHAR(10),
          ReportStatus BIT DEFAULT 1
        )

        WHILE (@SectionIdx&lt;=@TotalSections)
        BEGIN

          /** Get all bookings overlapping or within the range */
          INSERT INTO #OccupancyEvents (SectionIndex,SectionStartDate,SectionEndDate,ResourceID,OwnerID,ResourceName,StartDate,EndDate)
          SELECT
            @SectionIdx,
            @SectionStartDate,
            @SectionEndDate,
            VRE.ResourceID,
            VRE.ROwnerID,
            ResourceName,
            TStartDate,
            TEndDate
          FROM view_ResourceEvents VRE
          INNER JOIN @Resources R ON VRE.ResourceID=R.ResourceID
          INNER JOIN @OccupancyStatus OS ON VRE.REStatusID=OS.StatusID
          WHERE (
              (@SpecialisedOnly=0 AND NOT EXISTS(SELECT 1 FROM @SpecialisedEvents WHERE SpecResourceID=VRE.ResourceID AND TEndDate&gt;=SpecStartDate AND TStartDate&lt;SpecEndDate))
              OR
              (@SpecialisedOnly=1 AND EXISTS(SELECT 1 FROM @SpecialisedEvents WHERE SpecResourceID=VRE.ResourceID AND TEndDate&gt;=SpecStartDate AND TStartDate&lt;SpecEndDate))
            )
            AND (VRE.REAreaID=301)
            AND (((TStartDate&gt;=@SectionStartDate) AND (TStartDate&lt;@SectionEndDate))
            OR((TEndDate&gt;@SectionStartDate) AND (TEndDate&lt;=@SectionEndDate) ))
          ORDER BY TStartDate;


          /** Truncate events overlapping the range to be within the range. Events crossing more than one range will
          be sub-divided accordingly */
          UPDATE #OccupancyEvents
          SET
            StartDate = CASE
              WHEN StartDate&lt;@SectionStartDate THEN
                @SectionStartDate
              ELSE
                StartDate
              END,
            EndDate = CASE WHEN EndDate&gt;@SectionEndDate
              THEN
                @SectionEndDate
              ELSE
                EndDate
              END
          WHERE (SectionIndex=@SectionIdx);


          SET @SectionIdx=@SectionIdx+1;

          SELECT
            @SectionStartDate=DATEADD(month,1,@SectionStartDate),
            @SectionEndDate=DATEADD(month,1,@SectionEndDate);
        END;


        /** Set the general details for each event. */
        UPDATE #OccupancyEvents
        SET DateLabel = CONVERT(VARCHAR(10),StartDate,103)


        /** Calculate core hours */
        /** Combine overlapping events into single event.*/
        DECLARE @Overlaps TABLE (
          Idx INT NOT NULL UNIQUE,
          ResourceID UNIQUEIDENTIFIER NOT NULL,
          StartDate DATETIME NOT NULL,
          EndDate DATETIME NOT NULL
        )

        SELECT @Idx=1, @Count=COUNT(1)
        FROM #OccupancyEvents;

        WHILE (@Idx&lt;=@Count)
        BEGIN
          SET @ResourceID=NULL;

          SELECT @ResourceID=ResourceID,
                @EventStartDate=StartDate,
                @EventEndDate=EndDate
          FROM #OccupancyEvents
          WHERE (Idx=@Idx)
          AND (ReportStatus=1);

          IF (@ResourceID IS NOT NULL)
          BEGIN
            INSERT INTO @Overlaps(Idx,ResourceID,StartDate,EndDate)
            SELECT Idx,
                  ResourceID,
                  StartDate,
                  EndDate
            FROM #OccupancyEvents
            WHERE (ReportStatus=1)
              AND (ResourceID=@ResourceID)
              AND (EndDate&gt;@EventStartDate)
              AND (StartDate&lt;@EventEndDate);

            IF EXISTS(SELECT * FROM @Overlaps HAVING COUNT(*)&gt;0)
            BEGIN
              UPDATE #OccupancyEvents
              SET ReportStatus=0
              WHERE
              Idx IN (SELECT Idx FROM @Overlaps);

              INSERT INTO #OccupancyEvents (SectionIndex,SectionStartDate,SectionEndDate,ResourceID,OwnerID,ResourceName,StartDate,EndDate)
              SELECT
                SectionIndex,
                SectionStartDate,
                SectionEndDate,
                ResourceID,
                OwnerID,
                ResourceName,
                (SELECT MIN(StartDate) FROM @Overlaps),
                (SELECT MAX(EndDate) FROM @Overlaps)
              FROM #OccupancyEvents
              WHERE (Idx=@Idx);
            END;

            DELETE FROM @Overlaps;
          END

          SET @Idx=@Idx+1;
        END;

        /** Remove irrelevant records.*/
        DELETE FROM #OccupancyEvents WHERE ReportStatus=0;

        SELECT NULL;
      </crf:statement>
    </crf:query>

    <crf:query name="ProcessOccupancyEvents">
      <crf:statement>
        UPDATE #OccupancyEvents
        SET Days=DATEDIFF(day,StartDate,EndDate),
            DayStartMinutes=DATEPART(hour,StartDate)*60 + DATEPART(minute,StartDate),
            DayEndMinutes=DATEPART(hour,EndDate)*60 + DATEPART(minute,EndDate);


        /** Calculate the number of minutes in and out of core hours for single day events.*/
        UPDATE #OccupancyEvents
        SET
          MinutesInCoreHours = CASE
            WHEN (DATEPART(weekday,StartDate) IN (1,7)) OR (DayEndMinutes&lt;@DayStartMinutes) OR (DayStartMinutes&gt;@DayEndMinutes) THEN
              0
            ELSE
              DATEDIFF(minute, CASE
                WHEN @DayStartMinutes&gt;DayStartMinutes THEN
                  DATEADD(minute,@DayStartMinutes-DayStartMinutes,StartDate)
                ELSE
                  StartDate
                END,
                CASE
                  WHEN @DayEndMinutes&lt;DayEndMinutes THEN
                    DATEADD(minute,@DayEndMinutes-DayEndMinutes,EndDate)
                  ELSE
                    EndDate
                END)
            END,
          MinutesOutCoreHours = CASE
            WHEN DATEPART(weekday,StartDate) IN (1,7) THEN
              DayEndMinutes-DayStartMinutes
            WHEN @DayStartMinutes&gt;DayStartMinutes THEN
              CASE
                WHEN DayEndMinutes&lt;@DayStartMinutes THEN
                  DayEndMinutes-DayStartMinutes
                ELSE
                  @DayStartMinutes-DayStartMinutes
                END
              ELSE
                0
              END
              +
              CASE
                WHEN DATEPART(weekday,StartDate) IN (1,7) THEN
                  0
                WHEN @DayEndMinutes&lt;DayEndMinutes THEN
                  CASE
                    WHEN DayStartMinutes&gt;@DayEndMinutes THEN
                      DayEndMinutes-DayStartMinutes
                    ELSE
                      DayEndMinutes-@DayEndMinutes
                    END
                  ELSE
                    0
                  END
        WHERE (Days=0)

        /** Calculate the number of whole days in and out of core hours for multi-day events.*/
        UPDATE #OccupancyEvents
        SET
        MinutesInCoreHours=(@DayEndMinutes-@DayStartMinutes)*CASE WHEN (DATEPART(weekday,StartDate)=7) AND (Days&gt;7) THEN (Days) ELSE Days-1 END,
        MinutesOutCoreHours=(@MinutesInDay-@DayEndMinutes+@DayStartMinutes)*CASE WHEN (DATEPART(weekday,StartDate)=7) AND (Days&gt;7) THEN Days ELSE Days-1 END
        WHERE
        (Days&gt;1);


        /** Calculate the start and end of multi day events including weekends */
        UPDATE
        #OccupancyEvents
        SET
          MinutesInCoreHours=MinutesInCoreHours + CASE
            WHEN (DATEPART(weekday,StartDate) IN (1,7)) THEN
              0
            WHEN @DayStartMinutes&gt;DayStartMinutes THEN
              @DayEndMinutes-@DayStartMinutes
            WHEN @DayEndMinutes&gt;=DayStartMinutes THEN
              @DayEndMinutes-DayStartMinutes
            ELSE
              0
            END
            +
            CASE
              WHEN (DATEPART(weekday,EndDate) IN (1,7)) THEN
                0
              WHEN @DayEndMinutes&lt;DayEndMinutes THEN
                @DayEndMinutes-@DayStartMinutes
              WHEN @DayStartMinutes&lt;DayEndMinutes THEN
                DayEndMinutes-@DayStartMinutes
              ELSE
                0
            END,
        MinutesOutCoreHours=MinutesOutCoreHours + CASE
          WHEN (DATEPART(weekday,StartDate) IN (1,7)) THEN
            @MinutesInDay-DayStartMinutes
          WHEN @DayStartMinutes&gt;DayStartMinutes THEN
            @DayStartMinutes-DayStartMinutes+@MinutesInDay-@DayEndMinutes
          WHEN @DayEndMinutes&lt;=DayStartMinutes THEN
            @MinutesInDay-DayStartMinutes
          WHEN @DayEndMinutes&gt;DayStartMinutes THEN
            @MinutesInDay-@DayEndMinutes
          END
          +
          CASE
            WHEN (DATEPART(weekday,EndDate) IN (1,7)) THEN
              DayEndMinutes
            WHEN @DayEndMinutes&lt;DayEndMinutes THEN
              @DayStartMinutes+DayEndMinutes-@DayEndMinutes
            WHEN @DayStartMinutes&lt;DayEndMinutes THEN
              @DayStartMinutes
            ELSE
              DayEndMinutes
            END
        WHERE (Days&gt;0);


        /** Start Saturday or end Sunday - add day out core hours and remove day in-core hours*/
        UPDATE #OccupancyEvents
        SET
          MinutesInCoreHours=(@DayEndMinutes-@DayStartMinutes)*CASE WHEN (DATEPART(weekday,StartDate)=7) AND Days>7 THEN (Days) ELSE Days-1 END,
          MinutesOutCoreHours=(@MinutesInDay-@DayEndMinutes+@DayStartMinutes)*CASE WHEN (DATEPART(weekday,StartDate)=7) AND Days>7 THEN Days ELSE Days-1 END
        WHERE (Days&gt;1) AND (Days&lt;3) AND (DATEPART(weekday,StartDate)=7 OR DATEPART(weekday,EndDate)=1);


        /** Add 2 days in-core hours to out-core hours for every weekend covered by the event */
        UPDATE #OccupancyEvents
        SET
          MinutesInCoreHours=MinutesInCoreHours-((@DayEndMinutes-@DayStartMinutes)*(2)*(
            CASE WHEN DATEPART(year,EndDate)&lt;&gt;DATEPART(year,StartDate) THEN 53 ELSE DATEPART(week,EndDate) END -DATEPART(week,StartDate))),
          MinutesOutCoreHours=MinutesOutCoreHours+((@DayEndMinutes-@DayStartMinutes)*(2)*(
            CASE WHEN DATEPART(year,EndDate)&lt;&gt;DATEPART(year,StartDate) THEN 53 ELSE DATEPART(week,EndDate) END -DATEPART(week,StartDate)))
        WHERE (Days&gt;2) AND (DATEPART(week,StartDate)&lt;&gt;DATEPART(week,EndDate));


        /** Change in-core hours time by percentage */
        UPDATE #OccupancyEvents
        SET
          CorrectedMinutesInCoreHours=MinutesInCoreHours+(@Percentage*MinutesInCoreHours/100);


        /** Set the total number of minutes available for each resource  - if specialised usage is to be specified on less than a monthly
        basis, this needs to be changed to account for this. */
        DECLARE @ResourceAvailability TABLE (
          RASectionIdx INT,
          RAResourceID UNIQUEIDENTIFIER,
          RAOwnerID UNIQUEIDENTIFIER,
          RATotalMinutesAvailable INT,
          RAActualMinutesAvailable INT,
          RAMinutesUsed INT,
          RAStartDate DATETIME
        )

        INSERT INTO @ResourceAvailability(RASectionIdx,RAResourceID,RAOwnerID,RATotalMinutesAvailable,RAActualMinutesAvailable,RAMinutesUsed,RAStartDate)
        SELECT
          SM.SectionIdx,
          R.ResourceID,
          R.ROwnerID,
          SM.TotalMinutes,
          SM.TotalMinutes-COALESCE(OE.TotalMinutesUsed,0),
          COALESCE(OE.TotalMinutesUsed,0),
          SM.STMStartDate
        FROM @SectionMinutes SM
        INNER JOIN @Resources R ON 1=1
        LEFT OUTER JOIN (
            SELECT SectionIndex,ResourceID,SUM(MinutesInCoreHours) AS TotalMinutesUsed
            FROM #OtherEvents GROUP BY SectionIndex,ResourceID
          ) OE ON R.ResourceID=OE.ResourceID
        AND SM.SectionIdx=OE.SectionIndex
        WHERE (@SpecialisedOnly=1) OR
              (@SpecialisedOnly=0 AND
                NOT EXISTS(
                  SELECT 1
                  FROM @SpecialisedEvents
                  WHERE SpecResourceID=R.ResourceID
                    AND SM.STMEndDate&gt;=SpecStartDate
                    AND SM.STMStartDate&lt;SpecEndDate
                )
              );

        UPDATE @ResourceAvailability
        SET
          RAActualMinutesAvailable=0
        WHERE (RAActualMinutesAvailable&lt;0);

        SELECT NULL;
      </crf:statement>
    </crf:query>

    <crf:query name="ResourceTotals">
      <crf:statement>
        /**  Total in and out of core hour usage per resource per section */
        SELECT
          SectionIndex,
          DATEPART(WEEKDAY, GETDATE()) AS weekday,
          DATENAME(month,SectionStartDate) + ' ' + CONVERT(NVARCHAR(4),DATEPART(year,SectionStartDate)) AS SectionStartDate,
          ResourceName,
          COALESCE(
            CONVERT(DECIMAL(5,2),100*SUM(MinutesInCoreHours) / CONVERT(DECIMAL(10,2), (
              SELECT RAActualMinutesAvailable
              FROM @ResourceAvailability
              WHERE (RASectionIdx=SectionIndex)
                AND (RAResourceID=E.ResourceID)
                AND (RAActualMinutesAvailable&gt;0)
            ))),
          0) AS PercentInCoreHours,
          CONVERT(DECIMAL(10,2),CONVERT(DECIMAL(10,2),SUM(MinutesInCoreHours))/60) AS InCoreHours,
          CONVERT(DECIMAL(10,2),CONVERT(DECIMAL(10,2),SUM(MinutesOutCoreHours))/60) AS OutCoreHours,
          SUM(DATEDIFF(minute,StartDate,EndDate)) AS TotalResourceTimeActual,
          SUM(MinutesInCoreHours+MinutesOutCoreHours) AS TotalResourceTimeCalculated
        FROM #OccupancyEvents E
        GROUP BY
          SectionIndex,
          SectionStartDate,
          E.ResourceID,
          ResourceName
        ORDER BY
          E.SectionIndex,
          ResourceName;

        SET @TotalRecords=@@ROWCOUNT;
      </crf:statement>
    </crf:query>

  </crf:queryBatch>

  <title>Clinical Occupancy</title>

  <crf:body id="1" title="Print format" format="text/xml">
    <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:crf-utils="crf:utilities" version="1.0">
      <xsl:output method="html" indent="yes" omit-xml-declaration="yes" />
      <xsl:template match="NewDataSet">
        <div>
          <h2>Room Occupancy</h2>
          <table class="grid" cellpadding="3" cellspacing="0">
            <thead>
              <tr>
                <td>Room</td>
                <td>Weekday</td>
                <td>Time in core hours (%)</td>
                <td>Time in core hours (hours)</td>
                <td>Time out core hours (hours)</td>
              </tr>
            </thead>
            <xsl:apply-templates select="ResourceTotals" />
          </table>
        </div>
      </xsl:template>

      <xsl:template match="ResourceTotals">
        <xsl:if test="preceding-sibling::ResourceTotals[1]/SectionIndex!=SectionIndex or position()=1">
          <tr>
            <td colspan="4" class="section_head">
              <xsl:value-of select="SectionStartDate" />
            </td>
          </tr>
        </xsl:if>

        <tr>
          <xsl:attribute name="style">
            <xsl:if test="not(TotalResourceTimeActual=TotalResourceTimeCalculated)">background : #ff0000</xsl:if>
          </xsl:attribute>
          <td>
            <xsl:if test="not(TotalResourceTimeActual=TotalResourceTimeCalculated)">
              <xsl:text disable-output-escaping="yes">**** Calculation Error ****</xsl:text>
            </xsl:if>
            <xsl:value-of select="ResourceName" />
          </td>
          <td>
            <xsl:value-of select="weekday" />
          </td>
          <td>
            <xsl:value-of select="PercentInCoreHours" />
          </td>
          <td>
            <xsl:value-of select="InCoreHours" />
          </td>
          <td>
            <xsl:value-of select="OutCoreHours" />
          </td>
        </tr>
      </xsl:template>

    </xsl:stylesheet>
  </crf:body>
</crf:areaConfiguration>